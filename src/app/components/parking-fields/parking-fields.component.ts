import {Component, OnInit} from '@angular/core';import {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';@Component({  selector: 'app-parking-fields',  templateUrl: './parking-fields.component.html',  styleUrls: ['./parking-fields.component.css'],})export class ParkingFieldsComponent implements OnInit {  parkingRows: ParkingRow[] = [];  noFutureDateFilter;  constructor(    readonly formBuilder: FormBuilder  ) {    this.noFutureDateFilter = (d: Date): boolean => {      const date = this.parkingRows.length > 0 ? this.parkingRows[0].form.controls.date.value : null;      // Prevent Saturday and Sunday from being selected.      return !(d > new Date());    };  }  month() {    if (this.parkingRows.length === 0) {      return '';    }    const date = this.parkingRows[0].form.controls.date.value;    if (date) {      return date.getMonth() + 1;    }    return '';  }  year() {    if (this.parkingRows.length === 0) {      return '';    }    const date = this.parkingRows[0].form.controls.date.value;    if (date) {      return date.getFullYear();    }    return '';  }  maxYear() {    return new Date().getFullYear();  }  ngOnInit() {    this.parkingRows.push(new ParkingRow(0, this.formBuilder));    if (localStorage.getItem('parking_row_amount')) {      for (let i = 0; i < parseInt(localStorage.getItem('parking_row_amount'), 0) - 1; i++) {        this.parkingRows.push(new ParkingRow(i + 1, this.formBuilder));      }    }  }  totalAmount() {    let totalAmount = 0;    this.parkingRows.forEach(value => {      const amount = parseFloat(value.form.controls.money.value);      if (!isNaN(amount)) {        totalAmount += amount;      }    });    return totalAmount;  }  removeRow(row: ParkingRow) {    row.removeSavedChanges();    this.parkingRows = this.parkingRows.filter(value => value !== row);    this.parkingRows.forEach((value, index) => {      value.removeSavedChanges();      value.setIndex(index);      value.saveChanges();    });    localStorage.setItem('parking_row_amount', this.parkingRows.length + '');  }  addRow() {    this.parkingRows.push(new ParkingRow(this.parkingRows.length, this.formBuilder));    localStorage.setItem('parking_row_amount', this.parkingRows.length + '');  }  removeSavedChanges() {    this.parkingRows.forEach(value => value.removeSavedChanges());    localStorage.removeItem('parking_row_amount');  }}export class ParkingRow {  static readonly dayNames = ['MO', 'DI', 'WO', 'DO', 'VR', 'ZA', 'ZO'];  readonly form: FormGroup;  constructor(    public index: number,    formBuilder: FormBuilder  ) {    this.form = formBuilder.group({      date: new FormControl('', Validators.required),      description: new FormControl('', Validators.required),      money: new FormControl('', Validators.compose([Validators.required, Validators.pattern(/^\d+(\.\d{1,2})?$/)]))    });    this.restoreSavedChanges();    this.detectAndSaveChanges();  }  setIndex(index: number) {    this.index = index;  }  restoreSavedChanges() {    Object.keys(this.form.controls).forEach(key => {      const value = localStorage.getItem(`parking_row_${this.index}_${key}`);      console.log(value);      if (value) {        this.form.controls[key].setValue(key === 'date' ? new Date(value) : value);      }    });  }  detectAndSaveChanges() {    Object.keys(this.form.controls).forEach(key => {      this.form.controls[key].valueChanges.subscribe(value => {        localStorage.setItem(`parking_row_${this.index}_${key}`, value);      });    });  }  removeSavedChanges() {    Object.keys(this.form.controls).forEach(key => {      localStorage.removeItem(`parking_row_${this.index}_${key}`);    });  }  saveChanges() {    Object.keys(this.form.controls).forEach(key => {      localStorage.setItem(`parking_row_${this.index}_${key}`, this.form.controls[key].value);    });  }  getDayName() {    if (this.form.controls.date.value) {      return ParkingRow.dayNames[(this.form.controls.date.value as Date).getDay()];    }    return '';  }}